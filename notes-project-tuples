- Use asserts and static_asserts everywhere and at the beginning use #define NDEBUG to disable them
- Use atexit(func) to check for dynamic memory leaks etc
- Try to use some function from C11 or higher and check C version with macro if system can use them or not
- Use list of all functions to call function pointers for logger purpouse (like in Modern-C page 158) -> test-2 line:100 / Use time for logging messages /  
- Use endians for representation of data in network and on machine
- Use stdint variables instead of simple int

- Generic?
- Use signal for SIGTERM ?

use keywords:
- static (functions for one TU, variables for functions, optimization for arrays)
- const (read only value, const elements of array)
- extern (declaration in other TU)
- volatile (removes optimization, ensures that variable is saved and read from memory always when used)
- register (cant get address of variable with register, optimization purpouse)
- auto (default instead of register)
- inline (for functions that are short, possible to replace, also check macro for always inline)
- restrict (memory pointed to by pointer cant be changed from any other place than that pointer)


gcc -Wall -o user src/node/node_networking.c src/node/tuple_space.c tests/user.c -I ./include

gcc -Wall -o node_network src/node/node_networking.c -I ./include
gcc -Wall -o server_network src/server/server_networking.c -I ./include

